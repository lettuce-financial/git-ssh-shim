#!/bin/bash

# Shim program to negotiate an SSH key using ssh-agent.
#
# Based, in part, on discussion in  https://github.com/webfactory/ssh-agent/issues/30

if [ -n "${XTRACE}" ]; then
    set -x
fi

# Set ssh options.
#
# When using deploy keys, cloning will often fail unless host keys are valid.
SSH_OPTIONS=${SSH_OPTIONS:-"-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"}


# Determine how to choose the ssh key.
#
# If we have a user key, we need the GIT_SSH_COMMAND to tell us which user to expect,
# by adding the <github-username> to the command; the git client will pass these values
# as the first CLI argument.
#
# Otherwise, if we have a deploy key, we need to match the key to the repository name.

if [ "$1" != "git@github.com" ]; then
    # We have extra arguments; assume we have the github username.
    needle=$1
    shift
else
    # We have the repository name.
    #
    # The git client will this name in the last argument, as part of  a string of the form:
    #
    #     git-upload-pack 'organization/repository.git'

    for last in ${!#}; do :; done       # extract the final CLI argument
    noquotes=$(echo $last | tr -d "'")  # strip quotes
    needle=${noquotes/.git/}            # remove .git
fi

# Create a temporary directory for working with keys.

key_dir=$(mktemp -d)
trap "rm -rf $key_dir" EXIT


# Try each key.
#
# We can't run the full ssh command because we'll end up with an ssh protocol error if it fails
# and the git client will exit before we have a chance to try other keys.
#
# We can, however, use `ssh git@github.com` to test connectivity; GitHub will include the matching
# identity (for a deploy key) in each; this is documented behavior.
#
# See: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection

IFS=$'\n'
for key in $(ssh-add -L); do
    echo $key > $key_dir/current
    result=$(ssh -T -i $key_dir/current $(echo ${SSH_OPTIONS}) git@github.com 2>&1)

    if [[ "$result" == *"$needle"* ]]; then
	mv $key_dir/current $key_dir/key
    fi
done


# Make sure we found a matching key.

if [ ! -e $key_dir/key ]; then
    # no matching key
    exit 1
fi


# Use the key; we cannot use `exec` here without breaking the use of `trap`.
ssh -i $key_dir/key ${SSH_OPTIONS} $@
